package com.example.bleappimport android.bluetooth.BluetoothAdapterimport android.bluetooth.BluetoothDeviceimport android.bluetooth.le.*import android.os.ParcelUuidimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelclass DevicesViewModel : ViewModel() {    private val _devices: MutableLiveData<List<BluetoothDevice>> = MutableLiveData()    val devices: LiveData<List<BluetoothDevice>> get() = _devices    private val adapter = BluetoothAdapter.getDefaultAdapter()    private var scanner: BluetoothLeScanner? = null    private var callBack: BleScanCallBack? = null    private val settings: ScanSettings    private val filters: List<ScanFilter>    private val foundDevices = HashMap<String, BluetoothDevice>()    init {        settings = buildSettings()        filters = buildFilter()    }    private fun buildSettings() =        ScanSettings.Builder()            .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)            .build()    private fun buildFilter() =        listOf(            ScanFilter.Builder()//                .setServiceUuid(FILTER_UUID)                .build()        )    fun startScan() {        if (callBack == null) {            callBack = BleScanCallBack()            scanner = adapter.bluetoothLeScanner            scanner?.startScan(filters, settings, callBack)        }    }    fun stopScan() {        if (callBack != null) {            scanner?.stopScan(callBack)            scanner = null            callBack = null        }    }    override fun onCleared() {        super.onCleared()        stopScan()    }    inner class BleScanCallBack : ScanCallback() {        override fun onScanResult(callbackType: Int, result: ScanResult) {            super.onScanResult(callbackType, result)            foundDevices[result.device.address] = result.device            _devices.postValue(foundDevices.values.toList())        }        override fun onBatchScanResults(results: MutableList<ScanResult>) {            results.forEach { result ->                foundDevices[result.device.address] = result.device            }        }        override fun onScanFailed(errorCode: Int) {            Log.e("BluetoothScanner", "onScanFailed: scan error $errorCode")        }    }    companion object {        val FILTER_UUID = ParcelUuid.fromString("6f59f19e-2f39-49de-8525-5d2045f4d999")    }}